"use strict";(self.webpackChunklazone_learning_path=self.webpackChunklazone_learning_path||[]).push([[4900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8116:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2,title:"Git with an Existing Project"},o="Working with an Existing Project",l={unversionedId:"tutorial-basics/git/git-with-existing-project",id:"tutorial-basics/git/git-with-existing-project",title:"Git with an Existing Project",description:"Git Clone",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorial-basics/git/git-with-existing-project.md",sourceDirName:"tutorial-basics/git",slug:"/tutorial-basics/git/git-with-existing-project",permalink:"/lazone-training-path-docs/en/docs/next/tutorial-basics/git/git-with-existing-project",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/git/git-with-existing-project.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Git with an Existing Project"},sidebar:"tutorialSidebar",previous:{title:"Installing and Getting Started with Git",permalink:"/lazone-training-path-docs/en/docs/next/tutorial-basics/git/git-setup"},next:{title:"Git Convention",permalink:"/lazone-training-path-docs/en/docs/next/tutorial-basics/git/git-conventional-commit-rules"}},s={},c=[{value:"Git Clone",id:"git-clone",level:2},{value:"Git Status",id:"git-status",level:2},{value:"Git Rebase",id:"git-rebase",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-an-existing-project"},"Working with an Existing Project"),(0,r.kt)("h2",{id:"git-clone"},"Git Clone"),(0,r.kt)("p",null,"When you want to work on an existing project, you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"git clone")," command to create a local copy of the remote repository on your machine."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the directory where you want to clone the project."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/directory\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone the repository using the ",(0,r.kt)("inlineCode",{parentName:"p"},"git clone")," command with the repository URL:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://repository-link.git\n")))),(0,r.kt)("p",null,"This will create a directory with the project name in your current directory, containing all the files from the repository. You now have a local copy ready to be modified."),(0,r.kt)("h2",{id:"git-status"},"Git Status"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"git status")," command is used to display the status of files in your working directory relative to the last commit."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the cloned project directory."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/project\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the ",(0,r.kt)("inlineCode",{parentName:"p"},"git status")," command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n")))),(0,r.kt)("p",null,"This command will show you modified files, files ready to be committed, and other useful information about the state of your repository."),(0,r.kt)("h2",{id:"git-rebase"},"Git Rebase"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"git rebase")," command is used to integrate changes from one branch onto another. This is often used to maintain a clean and linear commit history."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure you are on the branch you want to update."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout my_branch\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Perform a rebase with the target branch (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"master"),"):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase master\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Resolve any conflicts if there are any; follow Git's instructions.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After resolving conflicts, continue the rebase:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase --continue\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Once the rebase is complete, update the remote branch:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin my_branch --force-with-lease\n")))),(0,r.kt)("p",null,"Caution: Use ",(0,r.kt)("inlineCode",{parentName:"p"},"--force")," with care as it rewrites the history of the remote repository."),(0,r.kt)("p",null,"These ",(0,r.kt)("inlineCode",{parentName:"p"},"git clone"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"git status"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"git rebase")," commands are essential tools for working effectively with Git. Make sure you understand how to use them correctly for optimal version control management."))}m.isMDXComponent=!0}}]);