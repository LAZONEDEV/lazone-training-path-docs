"use strict";(self.webpackChunklazone_learning_path=self.webpackChunklazone_learning_path||[]).push([[1898],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(r),m=s,k=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(k,l(l({ref:t},p),{},{components:r})):n.createElement(k,l({ref:t},p))}));function k(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:s,l[1]=o;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3659:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=r(7462),s=(r(7294),r(3905));const a={},l="Node.js et les bases de l\u2019API REST",o={unversionedId:"fullstack-learning-path/module-4-backend-api/nodejs-api-rest",id:"fullstack-learning-path/module-4-backend-api/nodejs-api-rest",title:"Node.js et les bases de l\u2019API REST",description:"Objectifs d'apprentissage",source:"@site/docs/fullstack-learning-path/module-4-backend-api/01-nodejs-api-rest.md",sourceDirName:"fullstack-learning-path/module-4-backend-api",slug:"/fullstack-learning-path/module-4-backend-api/nodejs-api-rest",permalink:"/lazone-training-path-docs/docs/next/fullstack-learning-path/module-4-backend-api/nodejs-api-rest",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fullstack-learning-path/module-4-backend-api/01-nodejs-api-rest.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Module 4: Backend API",permalink:"/lazone-training-path-docs/docs/next/category/module-4-backend-api"},next:{title:"Module 5: Synth\xe8se et qualit\xe9",permalink:"/lazone-training-path-docs/docs/next/category/module-5-synth\xe8se-et-qualit\xe9"}},i={},u=[{value:"Objectifs d&#39;apprentissage",id:"objectifs-dapprentissage",level:2},{value:"Plan",id:"plan",level:2},{value:"Concepts cl\xe9s",id:"concepts-cl\xe9s",level:2},{value:"Mise en place d\u2019Express",id:"mise-en-place-dexpress",level:2},{value:"Serveur minimal",id:"serveur-minimal",level:2},{value:"Routes GET/POST et contr\xf4leurs",id:"routes-getpost-et-contr\xf4leurs",level:2},{value:"Middlewares utiles",id:"middlewares-utiles",level:2},{value:"Validation et erreurs",id:"validation-et-erreurs",level:2},{value:"Structure sugg\xe9r\xe9e",id:"structure-sugg\xe9r\xe9e",level:2},{value:"Tests rapides (curl/Postman)",id:"tests-rapides-curlpostman",level:2},{value:"Pratique",id:"pratique",level:2},{value:"Contr\xf4le",id:"contr\xf4le",level:2},{value:"Voir aussi",id:"voir-aussi",level:2},{value:"R\xe9f\xe9rences",id:"r\xe9f\xe9rences",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"nodejs-et-les-bases-de-lapi-rest"},"Node.js et les bases de l\u2019API REST"),(0,s.kt)("h2",{id:"objectifs-dapprentissage"},"Objectifs d'apprentissage"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Comprendre Node.js runtime et Express"),(0,s.kt)("li",{parentName:"ul"},"Cr\xe9er endpoints GET/POST, structure JSON"),(0,s.kt)("li",{parentName:"ul"},"Comprendre le routage et l\u2019organisation")),(0,s.kt)("h2",{id:"plan"},"Plan"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Initialisation d\u2019un serveur Express"),(0,s.kt)("li",{parentName:"ul"},"Routes GET/POST et middlewares"),(0,s.kt)("li",{parentName:"ul"},"Structuration minimale (routes, contr\xf4leurs)")),(0,s.kt)("h2",{id:"concepts-cl\xe9s"},"Concepts cl\xe9s"),(0,s.kt)("p",null,"Une API REST expose des ressources via des endpoints HTTP. Chaque endpoint re\xe7oit une requ\xeate (m\xe9thode, chemin, headers, body) et renvoie une r\xe9ponse (statut, headers, JSON). Express simplifie la cr\xe9ation de ces routes et l\u2019ajout de middlewares (parsing JSON, logs, s\xe9curit\xe9 minimale)."),(0,s.kt)("h2",{id:"mise-en-place-dexpress"},"Mise en place d\u2019Express"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm i express\nnpm i -D typescript @types/node @types/express ts-node nodemon\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," (scripts de dev):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev": "nodemon --watch src --exec ts-node src/server.ts"\n  }\n}\n')),(0,s.kt)("h2",{id:"serveur-minimal"},"Serveur minimal"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// src/server.ts\nimport express from "express"\n\nconst app = express()\nconst PORT = process.env.PORT || 4000\n\n// Middleware pour parser le JSON du body\napp.use(express.json())\n\napp.get("/health", (_req, res) => {\n  res.status(200).json({ ok: true })\n})\n\napp.listen(PORT, () => {\n  console.log(`API listening on http://localhost:${PORT}`)\n})\n')),(0,s.kt)("h2",{id:"routes-getpost-et-contr\xf4leurs"},"Routes GET/POST et contr\xf4leurs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// src/routes/quotes.ts\nimport { Router } from "express"\n\nexport const quotes = Router()\n\n// In\u2011memory store (pour d\xe9mo)\nconst store: Array<{ id: string; text: string }> = [\n  { id: "1", text: "Stay hungry, stay foolish" },\n]\n\nquotes.get("/", (_req, res) => {\n  res.json(store)\n})\n\nquotes.post("/", (req, res) => {\n  const { text } = req.body || {}\n  if (!text || typeof text !== "string") {\n    return res.status(400).json({ error: "Invalid \'text\'" })\n  }\n  const id = String(store.length + 1)\n  const item = { id, text }\n  store.push(item)\n  res.status(201).json(item)\n})\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// src/server.ts (extrait)\nimport { quotes } from "./routes/quotes"\n\napp.use("/quotes", quotes)\n')),(0,s.kt)("h2",{id:"middlewares-utiles"},"Middlewares utiles"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"express.json()")," pour parser le corps JSON."),(0,s.kt)("li",{parentName:"ul"},"Logger simple:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// src/middlewares/logger.ts\nimport { Request, Response, NextFunction } from "express"\n\nexport function logger(req: Request, _res: Response, next: NextFunction) {\n  console.log(`${req.method} ${req.path}`)\n  next()\n}\n\n// usage dans server.ts\n// app.use(logger)\n')),(0,s.kt)("h2",{id:"validation-et-erreurs"},"Validation et erreurs"),(0,s.kt)("p",null,"Valider l\u2019entr\xe9e c\xf4t\xe9 serveur. Sans lib externe, faire des checks simples (type, required). En cas d\u2019erreur, renvoyer un statut 400 et un message utile. Centraliser la gestion d\u2019erreurs:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// src/middlewares/errors.ts\nimport { ErrorRequestHandler } from "express"\n\nexport const errorHandler: ErrorRequestHandler = (err, _req, res, _next) => {\n  console.error(err)\n  res.status(500).json({ error: "Internal Server Error" })\n}\n\n// server.ts\n// app.use(errorHandler)\n')),(0,s.kt)("h2",{id:"structure-sugg\xe9r\xe9e"},"Structure sugg\xe9r\xe9e"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"src/\n  server.ts\n  routes/\n    quotes.ts\n  middlewares/\n    logger.ts\n    errors.ts\n")),(0,s.kt)("h2",{id:"tests-rapides-curlpostman"},"Tests rapides (curl/Postman)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Ping\ncurl http://localhost:4000/health\n\n# Liste des quotes\ncurl http://localhost:4000/quotes\n\n# Cr\xe9ation d\u2019une quote\ncurl -X POST http://localhost:4000/quotes \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"text\":\"Make it work, then make it better\"}'\n")),(0,s.kt)("p",null,"Bonnes pratiques:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Toujours renvoyer un JSON coh\xe9rent (cl\xe9 ",(0,s.kt)("inlineCode",{parentName:"li"},"error")," en cas d\u2019erreur)."),(0,s.kt)("li",{parentName:"ul"},"Ne pas exposer les traces internes."),(0,s.kt)("li",{parentName:"ul"},"Journaliser c\xf4t\xe9 serveur, garder les messages concis.")),(0,s.kt)("h2",{id:"pratique"},"Pratique"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'API "quotes" simple: GET liste, POST simulation')),(0,s.kt)("h2",{id:"contr\xf4le"},"Contr\xf4le"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Tests manuels avec curl ou Postman")),(0,s.kt)("h2",{id:"voir-aussi"},"Voir aussi"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lazone-training-path-docs/docs/next/fullstack-learning-path/module-2/methodes-rendu-nextjs"},"Ma\xeetriser les m\xe9thodes de rendu")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lazone-training-path-docs/docs/next/fullstack-learning-path/module-2/nextjs-docker-app"},"D\xe9ployer une application Next.js avec Docker"))),(0,s.kt)("h2",{id:"r\xe9f\xe9rences"},"R\xe9f\xe9rences"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Node.js: ",(0,s.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"https://nodejs.org/")),(0,s.kt)("li",{parentName:"ul"},"Express Docs: ",(0,s.kt)("a",{parentName:"li",href:"https://expressjs.com/"},"https://expressjs.com/")),(0,s.kt)("li",{parentName:"ul"},"HTTP MDN: ",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/docs/Web/HTTP"},"https://developer.mozilla.org/docs/Web/HTTP"))))}d.isMDXComponent=!0}}]);